agent1.sources = source1 
agent1.sinks = sink1a sink1b 
agent1.sinkgroups = sinkgroup1 
agent1.channels = channel1  

agent1.sources.source1.channels = channel1 
agent1.sources.source1.type = spooldir 
agent1.sources.source1.spoolDir = /tmp/spooldir 

agent1.sinks.sink1a.channel = channel1
agent1.sinks.sink1a.type = avro 
agent1.sinks.sink1a.hostname = localhost 
agent1.sinks.sink1a.port = 10000 

agent1.sinks.sink1b.channel = channel1 
agent1.sinks.sink1b.type = avro 
agent1.sinks.sink1b.hostname = localhost 
agent1.sinks.sink1b.port = 10001 

agent1.sinkgroups.sinkgroup1.sinks = sink1a sink1b
#By default loadbalances by roundrobin. Can be overridden using processor.selector 
agent1.sinkgroups.sinkgroup1.processor.type = load_balance 
#Blacklist unavailable sinks by exponentially increasing timeout max till processor.selector.maxTimeOut (default 30 sec)
agent1.sinkgroups.sinkgroup1.processor.backoff = true       

agent1.channels.channel1.type = file

#Other than load_balance, there is another type of processor, failover, that instead of load balancing events across sinks uses a preferred sink if it is available, 
#and fails over to another sink in the case that the preferred sink is down. 
#The failover sink processor maintains a priority order for sinks in the group, and attempts delivery in order of priority. 
#If the sink with the highest priority is unavailable the one with the next highest priority is tried, and so on. 
#Failed sinks are blacklisted for an increasing timeout period (up to a maximum period of 30 seconds, controlled by processor.maxpenalty).