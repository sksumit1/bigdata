#flume-ng agent \   --conf-file spool-to-logger.properties \   --name agent1 \   --conf $FLUME_HOME/conf \   -Dflume.root.logger=INFO,console

agent1.sources = source1 
agent1.sinks = sink1a sink1b 
agent1.channels = channel1a channel1b  
agent1.sources.source1.channels = channel1a channel1b 

agent1.sinks.sink1a.channel = channel1a 
agent1.sinks.sink1a.type = hdfs
agent1.sinks.sink1a.hdfs.path = /tmp/flume
agent1.sinks.sink1a.hdfs.filePrefix = events 
agent1.sinks.sink1a.hdfs.fileSuffix = .log 
agent1.sinks.sink1a.hdfs.fileType = DataStream
agent1.sinks.sink1b.type = logger

agent1.sinks.sink1b.channel = channel1b  
agent1.channels.channel1a.type = file 
agent1.channels.channel1b.type = memory  

agent1.sources.source1.type = spooldir 
agent1.sources.source1.spoolDir = /tmp/spooldir  


#Delivery guarantee
#Flume uses a separate transaction to deliver each batch of events from the spooling directory source to each channel. 
#One transaction will be used to deliver to the channel feeding the HDFS sink, and then another transaction will be used to deliver the same batch of events to the channel for the logger sink. 
#If either of these transactions fails (if a channel is full, for example), then the events will not be removed from the source, and will be retried later.
#If we don't care that some events are not delivered to the logger sink, we can designate its channel as an optional channel, so that if the transaction associated with it fails, 
#then it will not cause events to be left in the source
agent1.sources.source1.selector.optional = channel1b
       